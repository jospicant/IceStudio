// Code generated by Icestudio 0.3.0-rc
// Tue, 16 May 2017 21:43:23 GMT

`default_nettype none

module main #(
 parameter v2aa9cc = 115200
) (
 input v816495,
 output v1b256f,
 output [0:4] vinit
);
 localparam p2 = v2aa9cc;
 wire w0;
 wire w1;
 wire w3;
 wire w4;
 assign v1b256f = w3;
 assign w4 = v816495;
 assign w1 = w0;
 v3e6c24 v07e1ca (
  .v608bd9(w0)
 );
 va16648 #(
  .v0dc2ff(p2)
 ) v9575f0 (
  .vca1960(w0),
  .vc38d2a(w1),
  .vda8d71(w3),
  .v9aa443(w4)
 );
 assign vinit = 5'b00000;
endmodule

module v3e6c24 (
 output v608bd9
);
 wire w0;
 assign v608bd9 = w0;
 v3e6c24_v68c173 v68c173 (
  .v(w0)
 );
endmodule

module v3e6c24_v68c173 (
 output v
);
 // Bit 1
 
 assign v = 1'b1;
endmodule

module va16648 #(
 parameter v0dc2ff = 115200
) (
 input vca1960,
 input vc38d2a,
 input v9aa443,
 output vda8d71
);
 localparam p0 = v0dc2ff;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w1 = vca1960;
 assign w2 = vc38d2a;
 assign w3 = v9aa443;
 assign vda8d71 = w4;
 va16648_v6e0972 #(
  .Baud(p0)
 ) v6e0972 (
  .Reset(w1),
  .EN(w2),
  .clk(w3),
  .clk_baud(w4)
 );
endmodule

module va16648_v6e0972 #(
 parameter Baud = 0
) (
 input Reset,
 input EN,
 input clk,
 output clk_baud
);
 
 //-----------------------------------------------------------------------------
 //-- Baudrate generator
 //-- It generates a square signal, with a frequency for communicating at the given
 //-- given baudrate
 //-- The output is set to 1 only during one clock cycle. The rest of the time is 0
 //--------------------------------------------------------------------------------
 //-- (c) BQ. December 2015. written by Juan Gonzalez (obijuan)
 //-----------------------------------------------------------------------------
 //-- GPL license
 //-----------------------------------------------------------------------------
 //`default_nettype none
 //`include "baudgen.vh"
 
 //----------------------------------------------------------------------------------------
 //-- baudgen module
 //--
 //-- INPUTS:
 //--     -clk: System clock (12 MHZ in the iceStick board)
 //--     -clk_ena: clock enable:
 //--            1. Normal working: The squeare signal is generated
 //--            0: stoped. Output always 0
 //-- OUTPUTS:
 //--     - clk_out: Output signal. Pulse width: 1 clock cycle. Output not registered
 //--                It tells the uart_tx when to transmit the next bit
 //--      __                                                         __
 //--   __| |________________________________________________________| |________________
 //--   ->  <- 1 clock cycle
 //--
 //---------------------------------------------------------------------------------------
 
 
 localparam BAUDRATE=Baud;
 
 //-- Number of bits needed for storing the baudrate divisor
 localparam N = $clog2(115200);
 
 //-- Counter for implementing the divisor (it is a BAUDRATE module counter)
 //-- (when BAUDRATE is reached, it start again from 0)
 
 reg [N-1:0] divcounter = 0;
 
 always @(posedge clk)
 
   if (!Reset)
     divcounter <= 0;
 
   else if (EN)
     //-- Normal working: counting. When the maximum count is reached, it starts from 0
     divcounter <= (divcounter == BAUDRATE - 1) ? 0 : divcounter + 1;
   else
     //-- Counter fixed to its maximum value
     //-- When it is resumed it start from 0
     divcounter <= BAUDRATE - 1;
 
 //-- The output is 1 when the counter is 0, if clk_ena is active
 //-- It is 1 only for one system clock cycle
 assign clk_baud = (divcounter == 0) ? EN : 0;
 
 
 
endmodule
