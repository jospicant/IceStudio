// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input v8b4602,
 input vd9cbe8,
 input v8c0305,
 input vclk,
 output [7:0] vb320bc
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 assign w0 = vd9cbe8;
 assign w1 = v8c0305;
 assign vb320bc = w4;
 assign w5 = v8b4602;
 assign w7 = vclk;
 assign w8 = vclk;
 assign w8 = w7;
 vb500d4 v8d9d06 (
  .v4c0933(w2),
  .v993315(w3),
  .v40b545(w4),
  .vd2bfc2(w6),
  .vb63d16(w7)
 );
 vb2af65 v661568 (
  .v94832e(w0),
  .v4e79c2(w1),
  .v5e4a75(w2),
  .vc6f0ee(w3),
  .v28a9b9(w8)
 );
 v35f267 v8bc1ce (
  .v0e28cb(w5),
  .vcbab45(w6)
 );
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module vb500d4 (
 input vd2bfc2,
 input v993315,
 input v4c0933,
 input vb63d16,
 output [7:0] v40b545
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:7] w4;
 assign w0 = vd2bfc2;
 assign w1 = v993315;
 assign w2 = v4c0933;
 assign w3 = vb63d16;
 assign v40b545 = w4;
 vb500d4_v42470b v42470b (
  .reset(w0),
  .dir(w1),
  .en(w2),
  .clk(w3),
  .count(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Count 8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador 8 bits Up Down Reset Enable
/*-------------------------------------------------*/

module vb500d4_v42470b (
 input reset,
 input dir,
 input en,
 input clk,
 output [7:0] count
);
 
 reg[7:0] count=8'b0;
 
 always @(posedge clk)
 begin
 if (reset) count<=8'b0;
   if(en)
 	begin
 		if(dir) 
 			count<=count+1;  //Count Up
 		else 
 			count<=count-1;	 //Count Down
 	end
 end
endmodule
//---- Top entity
module vb2af65 (
 input v28a9b9,
 input v94832e,
 input v4e79c2,
 output vc6f0ee,
 output v5e4a75
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign w4 = v94832e;
 assign w5 = v4e79c2;
 assign vc6f0ee = w6;
 assign v5e4a75 = w7;
 assign w8 = v28a9b9;
 assign w9 = v28a9b9;
 assign w10 = v28a9b9;
 assign w9 = w8;
 assign w10 = w8;
 assign w10 = w9;
 v8856d8 vb44038 (
  .v2d4bb0(w0),
  .vf5d74f(w1),
  .va834eb(w4),
  .vd335e2(w5),
  .v89ac22(w8)
 );
 v935127 vf47c7a (
  .vf36486(w2),
  .vd3e3de(w3),
  .vc68d05(w6),
  .vbaea54(w7),
  .vf67695(w10)
 );
 vb327c9 v8feab5 (
  .v70387c(w0),
  .v18f27b(w1),
  .ve590dd(w2),
  .vf9a565(w3),
  .ve5d3d5(w9)
 );
endmodule

/*-------------------------------------------------*/
/*-- EncoderQFull  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Full Rotary Encoder Quadrature
/*-------------------------------------------------*/
//---- Top entity
module v8856d8 (
 input v89ac22,
 input va834eb,
 input vd335e2,
 output v2d4bb0,
 output vf5d74f
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w1 = va834eb;
 assign w3 = vd335e2;
 assign v2d4bb0 = w4;
 assign vf5d74f = w5;
 assign w6 = v89ac22;
 assign w7 = v89ac22;
 assign w8 = v89ac22;
 assign w9 = v89ac22;
 assign w7 = w6;
 assign w8 = w6;
 assign w8 = w7;
 assign w9 = w6;
 assign w9 = w7;
 assign w9 = w8;
 v8b89a5 vbc4e35 (
  .vef4cea(w0),
  .vc24d9f(w4),
  .vb55943(w7)
 );
 v8b89a5 v4262c3 (
  .vc24d9f(w0),
  .vef4cea(w1),
  .vb55943(w6)
 );
 v8b89a5 v34e171 (
  .vef4cea(w2),
  .vc24d9f(w5),
  .vb55943(w9)
 );
 v8b89a5 v7f0187 (
  .vc24d9f(w2),
  .vef4cea(w3),
  .vb55943(w8)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sinc_Q  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sincronizer of Quadrature Signal
/*-------------------------------------------------*/
//---- Top entity
module v8b89a5 (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v8b89a5_v526aa2 v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Flip-flop D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Delay flip-flop
/*-------------------------------------------------*/

module v8b89a5_v526aa2 (
 input clk,
 input d,
 output q
);
 // D flip-flop
 
 reg q = 1'b0;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule
//---- Top entity
module v935127 (
 input vf67695,
 input vf36486,
 input vd3e3de,
 output vc68d05,
 output vbaea54
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = vf36486;
 assign w1 = vd3e3de;
 assign vc68d05 = w2;
 assign vbaea54 = w3;
 assign w4 = vf67695;
 v935127_vc9d476 vc9d476 (
  .q1(w0),
  .q2(w1),
  .rot_dir_o(w2),
  .rot_event_o(w3),
  .clk(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Encoder_Q  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Decodificador de quadrartura
/*-------------------------------------------------*/

module v935127_vc9d476 (
 input clk,
 input q1,
 input q2,
 output rot_dir_o,
 output rot_event_o
);
 
 
     // decode the (now debounced) rotary input into rot_dir and rot_event
     // rot_dir = 1 means right rotations, and
     // rot_event will go high for one cycle if a rotation occurs
     reg rot_dir=0, rot_event=0;
     reg rot_1_delay=0;
 
     always @(posedge clk) begin
         rot_1_delay <= q1;
 
         if(q1 & ~rot_1_delay) begin
             rot_event <= 1;
             rot_dir <= q2;
         end
         else begin
             rot_event <= 0;
         end
     end
 
     assign rot_dir_o = rot_dir;
 assign rot_event_o = rot_event;
endmodule
//---- Top entity
module vb327c9 (
 input ve5d3d5,
 input v70387c,
 input v18f27b,
 output ve590dd,
 output vf9a565
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = ve5d3d5;
 assign w1 = v70387c;
 assign w2 = v18f27b;
 assign ve590dd = w3;
 assign vf9a565 = w4;
 vb327c9_vf06677 vf06677 (
  .clk(w0),
  .qa(w1),
  .qb(w2),
  .q1(w3),
  .q2(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- DebouncerQ  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Quadrature Signal Debouncer
/*-------------------------------------------------*/

module vb327c9_vf06677 (
 input clk,
 input qa,
 input qb,
 output q1,
 output q2
);
 //-- Code taken from: https://github.com/mcmayer/iCE40/tree/master/rotary_enc
 //-- Mcmayer
 
 // decode the input from a rotary encoder
 // See http://www.eng.utah.edu/%7Ecs3710/xilinx-docs/examples/s3esk_rotary_encoder_interface.pdf
 //
 
 // debounce
     wire [1:0] rot_in = {qa, qb};
     reg q1=0, q2=1;
     
     always @(posedge clk) begin
         case (rot_in)
             'b00:begin q1 <= 0; q2<=q2; end
             'b01:begin q2 <= 0; q1<=q1; end
             'b10:begin q2 <= 1; q1<=q1; end
             'b11:begin q1 <= 1; q2<=q2; end
             default: begin q1<=q1; q2<=q2; end
         endcase
 
     end
endmodule
//---- Top entity
module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule
