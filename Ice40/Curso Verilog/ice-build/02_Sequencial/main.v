// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input vclk,
 output v67a08b,
 output [0:6] vinit
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 assign v67a08b = w2;
 assign w6 = vclk;
 assign w7 = vclk;
 assign w7 = w6;
 v7c0ae7 vbbcc5c (
  .v2efea4(w0),
  .v0daa9e(w6)
 );
 main_v896948 v896948 (
  .clk(w0),
  .a(w1),
  .f(w2),
  .b(w5)
 );
 vb734f6 v02991b (
  .v9fb85f(w1)
 );
 v7c0ae7 v682b05 (
  .v2efea4(w3),
  .v0daa9e(w7)
 );
 v100245 v2d0e5a (
  .vf45266(w3),
  .v6cebb8(w4)
 );
 v100245 v51eefa (
  .vf45266(w4),
  .v6cebb8(w5)
 );
 assign vinit = 7'b0000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v7c0ae7 (
 input v0daa9e,
 output v2efea4
);
 wire w0;
 wire w1;
 assign v2efea4 = w0;
 assign w1 = v0daa9e;
 v7c0ae7_v0bf905 v0bf905 (
  .clk_1hz(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Bomba_x1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Bombeo de bits. Una pulsación por segundo
/*-------------------------------------------------*/

module v7c0ae7_v0bf905 (
 input clk,
 output clk_1hz
);
 //-- module bomba_x1(input wire clk, output wire clk_1hz)
 
 //-- Bombeo de bits a 1Hz (1 pulsacion por segundo)
 
 //-- Constante para dividir y obtener una frecuencia de 2Hz
 localparam M = 6000000;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 //-- Contador modulo M. tras M pulsos de relog vuelve a 0
 always @(posedge clk)
   divcounter <= (divcounter == M - 1) ? 0 : divcounter + 1;
 
 //-- Obtener la señal de 2Hz. La señal no tiene ciclo del 50%
 wire clk_2hz;
 assign clk_2hz = divcounter[N-1]; 
 
 //-- Usamos un biestable T para dividir entre 2 y obtener una señal
 //-- de 1Hz y ciclo del 50%
 reg T = 0;
 always @(posedge clk_2hz)
   T <= ~T;
   
 //-- Señal de salida de 1Hz y ciclo del 50%
 assign clk_1hz = T;
   
 //endmodule
  
 
 
endmodule
//---- Top entity
module vb734f6 (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 vb734f6_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- 1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Un bit constante a 1
/*-------------------------------------------------*/

module vb734f6_vb2eccd (
 output q
);
 //-- Bit constante a 1
 assign q = 1'b1;
 
 
endmodule
//---- Top entity
module v100245 (
 input vf45266,
 output v6cebb8
);
 wire w0;
 wire w1;
 assign w0 = vf45266;
 assign v6cebb8 = w1;
 v100245_v83141e v83141e (
  .T(w0),
  .q(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Divisor2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Divisor de frecuencia entre 2
/*-------------------------------------------------*/

module v100245_v83141e (
 input T,
 output q
);
 reg _q = 0;
 
 always @(posedge T)
   _q <= ~_q;
   
 assign q = _q;
 
endmodule

module main_v896948 (
 input clk,
 input a,
 input b,
 output f
);
 
 reg f;
 
 always @ (posedge clk)
   begin
     f <= a & b;
   end
endmodule
