// Code generated by Icestudio 0.3.0-rc
// Fri, 31 Mar 2017 06:55:56 GMT

`default_nettype none

module main (
 input [2:0] v31a976,
 input [15:0] vc5ac21,
 input [15:0] ve0fa10,
 input v8fa20d,
 output [15:0] v1f886b,
 output [0:4] vinit
);
 wire [0:2] w0;
 wire [0:15] w1;
 wire [0:15] w2;
 wire w3;
 wire [0:15] w4;
 assign w0 = v31a976;
 assign w1 = vc5ac21;
 assign w2 = ve0fa10;
 assign w3 = v8fa20d;
 assign v1f886b = w4;
 main_vf8da70 vf8da70 (
  .ALU_control(w0),
  .Ainput(w1),
  .Binput(w2),
  .Clock(w3),
  .Shift_output(w4)
 );
 assign vinit = 5'b00000;
endmodule

module main_vf8da70 (
 input [2:0] ALU_control,
 input [15:0] Ainput,
 input [15:0] Binput,
 input Clock,
 output [15:0] Shift_output
);
 //module ALU(ALU_control,Ainput,Binput,Clock)
 //input[2:0] ALU_control;
 //input[15:0] Ainput;
 //input[15:0] Binput;
 //input Clock;
 //output[15:0] Shift_output
 reg[15:0] Shift_output;
 reg[15:0] ALU_output;
 
 /*Select ALU Arithmetic/Logical Operation */
 
 always @(ALU_control or Ainput or Binput)
     case(ALU_control[2:1])
         0:ALU_output = Ainput + Binput;
         1:ALU_output = Ainput - Binput;
         2:ALU_output = Ainput & Binput;
         3:ALU_output = Ainput | Binput;
         default: ALU_output=0;
     endcase
     
 /*Shift bits left using left operator if required and load register */
 
 always @(posedge Clock)
     if(ALU_control[0]==1)
         Shift_output <= ALU_output << 1;
     else
         Shift_output <= ALU_output;
 
endmodule
