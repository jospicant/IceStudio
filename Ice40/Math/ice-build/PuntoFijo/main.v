// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main #(
 parameter v1e518e = 8'b00101000,
 parameter v3c1541 = 115200
) (
 input vclk,
 output v3ba2a8,
 output vc91705,
 output [0:6] vinit
);
 localparam p0 = v1e518e;
 localparam p2 = v3c1541;
 wire w1;
 wire [0:15] w3;
 wire w4;
 wire w5;
 wire [0:15] w6;
 wire w7;
 wire w8;
 assign vc91705 = w1;
 assign v3ba2a8 = w5;
 assign w7 = vclk;
 assign w8 = vclk;
 assign w6 = w3;
 assign w8 = w7;
 v056cb0 #(
  .v17f1ae(p2)
 ) v455d12 (
  .vb4893e(w1),
  .vb33247(w3),
  .vdb9eec(w4),
  .v2518e4(w7)
 );
 main_vf2e079 #(
  .n(p0)
 ) vf2e079 (
  .o(w3)
 );
 va9a5bc vfa0180 (
  .v2a8434(w4),
  .vac0eb2(w8)
 );
 main_va5b18a va5b18a (
  .o(w5),
  .in(w6)
 );
 assign vinit = 7'b0000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v056cb0 #(
 parameter v17f1ae = 115200
) (
 input v2518e4,
 input [15:0] vb33247,
 input vdb9eec,
 output vb4893e,
 output vc62937,
 output v7f47ed
);
 localparam p0 = v17f1ae;
 wire w1;
 wire w2;
 wire w3;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire [0:15] w9;
 wire w10;
 assign w1 = v2518e4;
 assign vb4893e = w2;
 assign w3 = v2518e4;
 assign v7f47ed = w6;
 assign vc62937 = w7;
 assign w8 = vdb9eec;
 assign w9 = vb33247;
 assign w3 = w1;
 vc6459c #(
  .ved2ada(p0)
 ) v66291c (
  .ve9a78f(w1),
  .v8caaa5(w2),
  .v19b8dd(w4),
  .v05e99b(w5),
  .v01321e(w10)
 );
 v056cb0_v70108e v70108e (
  .clk(w3),
  .data_o(w4),
  .txmit_o(w5),
  .done(w6),
  .busy(w7),
  .txmit(w8),
  .data(w9),
  .next(w10)
 );
endmodule

/*-------------------------------------------------*/
/*-- serial-tx-16  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transmisor serie de 16 bits
/*-------------------------------------------------*/

module v056cb0_v70108e (
 input clk,
 input [15:0] data,
 input txmit,
 input next,
 output [7:0] data_o,
 output txmit_o,
 output busy,
 output done
);
 reg state = 0;
 
 wire finish;
 
 always @(posedge clk)
   if (txmit)
     state <= 1'b1;
   else if (finish)
     state <= 1'b0;
 
 //-- El estado es directamente la señal de busy    
 assign busy = state;
 
 //-- La señal de done se obtiene por el flanco 
 //-- de bajada en el estado
 
 reg q0 = 0;
 
 always @(posedge clk)
   q0 <= state;
   
 assign done = (q0 & ~state);
 
 //-- Tic inicial: En el arranque del transmisor
 //-- Flanco de subida en el estado
 wire tic_start = (~q0 & state);  
 
 
 //-- Transmision de un byte: en el tic de start y en el tic de next  
 //-- siempre y cuano el transmisor esté habilitado
 assign txmit_o = (tic_start | tic_next) & state;
 
 //-- Cable que contiene el tic siguiente. Se obtiene retrasando dos
 //-- ciclos la señal next
 wire tic_next = q2;
 
 reg q1 = 0;
 reg q2 = 0;
 
 always @(posedge clk) begin
   q1 <= next;
   q2 <= q1;
 end
   
 //--- El dato a enviar se obtiene seleccionando el byte alto o  
 //-- el bajo
 assign data_o = (nbyte) ? data[15:8] : data[7:0];
 
 //-- Biestable T que indica el byte a enviar
 //-- Inicialmente vale 1 (alto)
 reg nbyte = 1;
 
 always @(posedge clk)
   if (next)
     nbyte <= ~nbyte;
 
 //-- Un flanco de subida en nbyte indica que se ha enviado el último
 //-- byte
 
 reg q3 = 0;
 
 always @(posedge clk)
   q3 <= nbyte;
   
 assign finish = (~q3 & nbyte);  
 
 
 
 
 
 
 
endmodule
//---- Top entity
module vc6459c #(
 parameter ved2ada = 115200
) (
 input ve9a78f,
 input [7:0] v19b8dd,
 input v05e99b,
 output v8caaa5,
 output v2da441,
 output v01321e
);
 localparam p1 = ved2ada;
 wire w0;
 wire w2;
 wire [0:7] w3;
 wire w4;
 wire w5;
 wire w6;
 assign v8caaa5 = w0;
 assign w2 = ve9a78f;
 assign w3 = v19b8dd;
 assign w4 = v05e99b;
 assign v2da441 = w5;
 assign v01321e = w6;
 vc6459c_vedebcc #(
  .BAUD(p1)
 ) vedebcc (
  .TX(w0),
  .clk(w2),
  .data(w3),
  .txmit(w4),
  .busy(w5),
  .done(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Serial-tx  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transmisor serie
/*-------------------------------------------------*/

module vc6459c_vedebcc #(
 parameter BAUD = 0
) (
 input clk,
 input [7:0] data,
 input txmit,
 output TX,
 output busy,
 output done
);
 //-- Constantes para obtener las velocidades estándares
 `define B115200 104 
 `define B57600  208
 `define B38400  313
 `define B19200  625
 `define B9600   1250
 `define B4800   2500
 `define B2400   5000
 `define B1200   10000
 `define B600    20000
 `define B300    40000
 
 //-- Constante para calcular los baudios
 localparam BAUDRATE = (BAUD==115200) ? `B115200 : //-- OK
                       (BAUD==57600)  ? `B57600  : //-- OK
                       (BAUD==38400)  ? `B38400  : //-- Ok
                       (BAUD==19200)  ? `B19200  : //-- OK
                       (BAUD==9600)   ? `B9600   : //-- OK
                       (BAUD==4800)   ? `B4800   : //-- OK 
                       (BAUD==2400)   ? `B2400   : //-- OK
                       (BAUD==1200)   ? `B1200   : //-- OK
                       (BAUD==600)    ? `B600    : //-- OK
                       (BAUD==300)    ? `B300    : //-- OK
                       `B115200 ;  //-- Por defecto 115200 baudios
 
 
 //---- GENERADOR DE BAUDIOS
 
 //-- Calcular el numero dde bits para almacenar el divisor
 localparam N = $clog2(BAUDRATE);
 
 //-- Contador para implementar el divisor
 //-- Es un contador modulo BAUDRATE
 reg [N-1:0] divcounter = 0;
 
 //-- Cable de reset para el contador
 //-- Comparador que resetea el contador cuando se alcanza el tope
 //-- o cuando el estado del biestable es 0 (apagado)
 wire reset = ov_gen | (state == 0);
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Hemos llegado al final
 wire ov_gen = (divcounter == BAUDRATE-1);
 
 
 
 //-- REGISTRO DESPLAZAMIENTO
 
 //-- Salida serie. Inicialmete a 1 (reposo) 
 reg TX = 1;
 
 //-- Registro de desplazamiento de 9 bits
 //-- Inicializado todo a 1s
 reg [8:0] q = 9'h1FF;
 
 //-- La entrada de shift es la salida del generador de baudios
 wire shift = ov_gen;
 
 always @(posedge clk)
   if (txmit_tic)
   //-- Carga del registro
     q <= {data, 1'b0};
     
   else if (shift)
     //-- Desplazamiento. Rellenar con 1 (bit de stop)
     q <= {1'b1, q[8:1]};
     
 //-- Sacar el bit de menor peso por serial-out    
 wire so;
 assign so = q[0];
 
 //-- La salida tx la registramos
 always @(posedge clk)
   TX <= so;
   
 //-- La señal de entrada txmit se pasa por un 
 //-- detector de flancos de subida para generar un tic
 reg q_re = 0;
 wire txmit_tic;
 
 always @(posedge clk)
   q_re <= txmit;
   
 assign txmit_tic = (~q_re & txmit);  
 
 
 
 //-- Estado de transmisor
 //-- 0: Parado
 //-- 1: Ocupado (transmitiendo)
 reg state = 0;
   
 always @(posedge clk)
   //-- Empieza la transmision: ocupado
   if (txmit)
     state <= 1'b1;
     
   //-- Acaba la transmision: libre    
   else if (ov)
     state <= 1'b0;
 
 //-- Contador de bits enviados
 reg [3:0] bits = 0;
 always @(posedge clk)
   //-- Si la cuenta ha terminado... volver a 0
   if (ov)
     bits <= 2'b00;
   else
     if (shift)
       bits <= bits + 1;
 
 //-- Comprobar si se ha transmitido el último bit (overflow)
 //-- 1 bit de start + 8 bits de datos + 1 bit de stop
 wire ov = (bits == 10);
 
 //-- La señal de ocupado es el estado del transmisor
 assign busy = state;
 
 //-- La señal de done es la de overflow pero retrasada un
 //-- periodo de reloj del sistema y que el biestable 
 //-- llegue al estado de parado antes de que se 
 //-- empiece otra transmision
 
 reg done=0;
 
 always @(posedge clk)
   done <= ov;
 
endmodule
//---- Top entity
module va9a5bc #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 va9a5bc_v6cac2f #(
  .SEC(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tic-Sec  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Corazón de bombeo de tics a con periodo paramétrico de segundos
/*-------------------------------------------------*/

module va9a5bc_v6cac2f #(
 parameter SEC = 0
) (
 input clk,
 output o
);
 //localparam SEC;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000*SEC;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule

module main_vf2e079 #(
 parameter n = 0
) (
 output [15:0] o
);
 wire signed a=n;
 wire signed b=8'b1110_1000;
 
 wire signed [15:0] o;
 
 assign o=a+b;
endmodule

module main_va5b18a (
 input [15:0] in,
 output o
);
 assign o=in[8];
endmodule
